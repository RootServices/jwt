package org.rootservices.jwt.translator;

import org.junit.Before;
import org.junit.Test;
import org.rootservices.jwt.config.AppFactory;
import org.rootservices.jwt.translator.PemToKeyPair;

import java.net.URL;
import java.security.KeyPair;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;

/**
 * Created by tommackenzie on 11/30/15.
 */
public class PemToKeyPairTest {

    private AppFactory appFactory;

    @Before
    public void setUp() {
        this.appFactory = new AppFactory();
    }

    @Test
    public void shouldMakeCorrectKeyPair(){
        URL privateKeyURL = getClass().getResource("/certs/rsa-private-key.pem");
        PemToKeyPair pemToKeyPair = appFactory.pemToKeyPair(privateKeyURL);

        byte[] expectedPrivateKey = new byte[]{48, -126, 4, -66, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 4, -88, 48, -126, 4, -92, 2, 1, 0, 2, -126, 1, 1, 0, -7, -25, 59, -105, 70, 115, 121, 9, 112, -44, 89, 113, -93, -88, 72, 97, -27, -31, -73, 4, -35, -20, 62, -97, 38, 71, -9, 112, -40, 43, -115, 56, 114, -35, -45, -53, -57, 51, 40, 105, 96, 5, -17, -90, -16, 49, 127, -47, 30, 117, -117, 104, 72, 14, 91, 71, 69, -27, -125, 4, 9, -87, -18, 47, 111, -54, -58, 92, 42, -67, 17, -48, -70, -34, -94, 46, -67, -103, -103, 53, -76, 67, 52, -75, -36, -115, 73, -104, 56, -106, 118, 5, -52, -46, 106, 102, -118, 26, -57, 20, -90, 71, 120, -3, -126, -112, -68, 123, 98, -122, -1, 54, -75, -59, 74, 2, 118, -100, -54, 85, -117, 102, -96, -76, -100, 114, -80, 76, -49, -12, -46, -13, -91, -70, -50, -33, -99, -124, -109, 19, 122, -81, 85, -12, 71, -56, 52, 34, 127, -8, -128, -107, -96, -21, 40, -114, 2, 47, 103, 26, 73, -94, 41, -104, 46, 76, 58, 18, 120, 121, 72, 116, -18, -99, -96, 40, 36, -56, 125, 118, -72, 62, -16, 24, -87, 81, -63, -27, 13, -118, -102, -102, -39, -112, -20, 82, 6, 102, 85, -107, 1, -78, 31, 125, -50, 76, -87, 118, 48, 21, 63, -34, -123, 95, 34, 11, 35, 57, -56, -15, -58, -6, 10, 73, -91, -79, -25, -43, 58, 97, 104, 7, 110, 106, -66, -117, -59, 27, -40, 59, 92, 13, -95, 3, 106, -84, -124, 121, 82, -17, -59, -82, 46, 70, 53, 109, 2, 3, 1, 0, 1, 2, -126, 1, 1, 0, -114, 1, -119, 10, 80, 93, 99, -59, 42, -103, 112, 110, 51, -6, 119, -113, 49, -21, 78, 109, -12, -111, -65, -113, -2, 87, -36, -45, 1, -13, -43, -98, -29, 31, 12, -80, 122, 116, -90, -99, 34, -108, -100, -9, 54, -4, 89, -50, -126, 73, 119, 59, 125, -34, -78, -99, -48, -87, 56, 6, -2, 90, -46, -33, -97, -34, 17, 83, -28, 113, 102, 3, 63, 125, 45, -103, -13, -31, -87, 127, 43, -3, 24, -95, -45, 63, 114, 55, -114, -56, 105, 46, -88, -110, 85, 38, 9, -118, 103, -32, 99, 16, -80, 63, 22, -121, -102, -93, 94, 124, -87, -33, -13, -16, -75, 58, -85, 30, 51, -105, -30, -52, 33, -68, 32, 62, -57, -48, -18, -47, 49, 0, -79, -49, 113, 27, -127, -81, -84, -93, -56, 19, 84, 3, 113, 33, -31, -97, 20, -123, -52, 19, 82, -115, 111, 26, 82, 2, 105, 90, 119, 15, 16, 53, -8, -22, 96, 67, -34, 49, -117, 77, -12, -120, -123, 119, 123, 41, 45, 37, -10, -92, 40, 88, -54, 56, 59, 74, -31, -1, 42, -43, 48, -116, 15, 104, -8, 105, -10, 101, -66, -13, 69, -20, 119, 107, -1, 99, 36, -29, -46, 81, -78, -21, -106, -93, 24, -74, 121, 70, 86, 53, 63, -99, 79, 43, 34, -93, -120, -104, -48, -32, -125, 20, -101, 86, 78, -69, -13, 89, 9, 96, -113, 15, -2, 41, 54, -91, 119, -20, -75, 82, -6, 75, -88, -63, 2, -127, -127, 0, -3, 85, 64, -18, -116, -108, -25, 30, 57, -17, 102, -60, 30, -67, 102, 105, -32, 113, -88, 104, 9, -110, -33, -61, -126, -5, 63, 102, 18, -34, -46, -56, 77, -111, 106, -106, 19, -68, 35, 60, -94, -74, -43, -1, 15, -6, 81, -12, -74, -23, 7, 121, -31, -23, 61, 36, -103, 8, -59, 100, -60, -4, 70, 31, 1, -1, 63, 105, -67, -7, -97, 126, 108, 91, 47, -69, -125, -2, 57, 63, -49, 1, -78, -46, -10, -6, -127, -42, -17, 26, -7, -9, -54, 113, -124, -23, 120, 108, 114, 46, -17, -47, -42, 91, -88, -93, 67, -66, -80, -82, -20, 115, 104, -16, 1, 107, 96, 79, -27, 64, 20, 45, -20, -29, -63, 18, -27, -47, 2, -127, -127, 0, -4, -120, -68, 88, 69, 16, -25, -60, -1, -44, -84, -105, -106, 118, -63, -34, -46, -13, 88, -61, -125, -58, 96, -81, 38, -106, 36, -56, -76, -33, 100, -29, -74, -79, -34, 9, -79, 35, 121, -6, -71, -78, 75, -37, -46, 59, -46, 117, -101, -16, 90, -4, 44, 1, -94, -99, 40, 35, 99, 91, -82, -7, 55, -99, -28, -38, -28, 104, -77, 51, -127, -122, 13, 85, -93, 97, -46, -79, 111, 39, 31, -94, 127, 82, 30, 31, 96, -13, 65, 24, 69, 114, 98, 62, -8, 8, 87, 44, 77, 48, -51, -69, 23, -59, 0, 63, -9, -127, 106, 100, 73, 90, 28, 15, -105, 27, -128, 4, -85, 42, -117, 87, 65, 48, -59, 124, -48, -35, 2, -127, -127, 0, -54, -82, -12, -2, 102, -73, -109, -102, 25, 92, 50, -22, 98, 117, -62, -124, -97, 48, 16, 62, -4, -71, -24, 17, 114, -80, 53, -17, 34, -43, -25, -22, -98, 52, -28, 4, 34, -47, -7, -105, 63, -49, -20, -78, -33, 67, -75, 98, -121, 29, 54, 0, 12, 1, 34, 12, 47, -20, 86, -111, -29, 16, -69, -63, 127, 69, -118, -92, -67, 124, 4, 97, -113, -85, -3, 42, -105, -42, 68, 83, -118, -7, -98, -21, 46, -13, 10, 2, -66, -42, -28, 123, -98, 26, -24, -18, 42, -115, 9, 102, 8, 53, -24, -68, -8, -43, 119, 20, 16, 36, 67, -59, -86, -123, -85, 125, 15, 87, -100, -31, -127, -61, -92, -82, 44, 1, 68, -95, 2, -127, -128, 1, -46, -106, -47, 104, 70, 51, -10, 7, 6, -88, -20, 59, 40, -58, 67, 110, 112, 85, 46, -84, 15, -51, 120, -42, 37, 117, 68, -127, -111, -81, 47, -71, -116, -43, 22, 106, -47, -33, -70, -128, -122, -103, -25, -113, 63, -31, 71, -6, 5, 37, 18, -10, -38, 88, 43, 28, 52, 13, 46, -121, 55, -61, 63, -1, 123, -40, -12, 44, 126, -19, -85, 99, 3, 64, 55, -97, -122, -86, 79, -76, -7, -66, 67, -128, 118, 39, -125, -7, -17, 75, -23, 4, 110, -127, -23, -59, 127, 75, 91, 83, -48, -54, -34, 32, 31, 86, 16, -8, 12, -101, 62, -20, 62, -20, -113, 69, 64, 67, 95, -2, 59, 117, -5, -3, 32, -26, 125, 2, -127, -128, 74, -5, -54, -114, -91, 22, 103, 41, -72, -57, 49, -7, -81, -117, -67, -27, -53, 5, -88, 56, 81, -42, 99, 116, 28, -120, -56, -31, -99, 15, 5, -4, 75, 71, -51, -93, 96, 11, -84, 43, 90, 28, -59, -57, 23, 107, 47, 79, -68, 108, 76, -117, -62, -123, 14, -71, -41, -36, 101, 124, -127, 27, 122, 45, 74, 97, -112, 46, -87, -5, -82, -17, -79, 68, -44, -97, 127, -52, -4, 99, -47, 52, 25, 34, -93, -35, -18, -38, -88, -5, 115, 120, 16, -102, -26, 42, -28, 2, -119, -23, -126, -116, 49, 125, -56, -114, -27, 43, -53, -124, -51, -80, -117, -58, -73, -99, 51, -86, 30, 99, 100, 77, 91, -61, -65, -48, 63, -68};
        byte[] expectedPublicKey = new byte[]{48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -7, -25, 59, -105, 70, 115, 121, 9, 112, -44, 89, 113, -93, -88, 72, 97, -27, -31, -73, 4, -35, -20, 62, -97 , 38, 71, -9, 112, -40, 43, -115, 56, 114, -35, -45, -53, -57, 51, 40, 105, 96, 5, -17, -90, -16, 49, 127, -47, 30, 117, -117, 104, 72, 14, 91, 71, 69, -27, -125, 4, 9, -87, -18, 47, 111, -54, -58, 92, 42, -67, 17, -48, -70, -34, -94, 46, -67, -103, -103, 53, -76, 67, 52, -75, -36, -115, 73, -104, 56, -106, 118, 5, -52, -46, 106, 102, -118, 26, -57, 20, -90, 71, 120, -3, -126, -112, -68, 123, 98, -122, -1, 54, -75, -59, 74, 2, 118, -100, -54, 85, -117, 102, -96, -76, -100, 114, -80, 76, -49, -12, -46, -13, -91, -70, -50, -33, -99, -124, -109, 19, 122, -81, 85, -12, 71, -56, 52, 34, 127, -8, -128, -107, -96, -21, 40, -114, 2, 47, 103, 26, 73, -94, 41, -104, 46, 76, 58, 18, 120, 121, 72, 116, -18, -99, -96, 40, 36, -56, 125, 118, -72, 62, -16, 24, -87, 81, -63, -27, 13, -118, -102, -102, -39, -112, -20, 82, 6, 102, 85, -107, 1, -78, 31, 125, -50, 76, -87, 118, 48, 21, 63, -34, -123, 95, 34, 11, 35, 57, -56, -15, -58, -6, 10, 73, -91, -79, -25, -43, 58, 97, 104, 7, 110, 106, -66, -117, -59, 27, -40, 59, 92, 13, -95, 3, 106, -84, -124, 121, 82, -17, -59, -82, 46, 70, 53, 109, 2, 3, 1, 0, 1};

        KeyPair actual = pemToKeyPair.translate();
        assertThat(actual, is(notNullValue()));
        assertThat(actual.getPrivate().getAlgorithm(), is("RSA"));
        assertThat(actual.getPrivate().getEncoded(), is(expectedPrivateKey));
        assertThat(actual.getPublic().getAlgorithm(), is("RSA"));
        assertThat(actual.getPublic().getEncoded(), is(expectedPublicKey));
    }
}